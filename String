424. Longest Repeating Character Replacement
         def characterReplacement(self, s: str, k: int) -> int:
        count = defaultdict(lambda : 0)
        res = 0
        l = 0
        for r in range(len(s)):
            count[s[r]] += 1
            if (r-l+1 - max(count.values())) > k:
                count[s[l]] -= 1
                l += 1
            res = max(res, r - l +1)
        return res
        
        or count = {}
        count[s[r]] = 1+count.get(s[r],0)
76. Minimum Window Substring
         def minWindow(self, s: str, t: str) -> str:
        l = 0
        window = {}
        countT = {}
        for c in t:
            countT[c] = 1+ countT.get(c,0)
        have, need = 0 , len(countT)
        resLen = len(s) +1
        res = [-1,-1]

        for r in range(len(s)):
            window[s[r]] = 1+ window.get(s[r],0)
            if s[r] in t and window[s[r]] == countT[s[r]]:
                have += 1
            while have == need:
                if (r-l+1) < resLen:
                    resLen = r -l +1
                    res = [l,r]
                window[s[l]] -= 1
                if s[l] in t and window[s[l]] < countT[s[l]]:
                    have -= 1
                l +=1 
        l,r = res
        return s[l:r+1]
49. Group Anagrams
        def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        res = defaultdict(list)
        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c) - ord('a')] += 1
            #print(count)
            res[tuple(count)].append(s)
            #print(res)
        return res.values()
20. Valid Parentheses
            mapping = {')':'(','}':'{',']':'['}
        stack = []
        for i in range(0,len(s)):
            if s[i] in mapping:
                if stack and stack[-1] == mapping[s[i]]:
                    stack.pop()
                else: return False
            else: stack.append(s[i])
        return len(stack) == 0
        using stack
125. Valid Palindrome
         def isPalindrome(self, s: str) -> bool:
        l, r = 0, len(s)-1
        while l< r:
            while not self.isalphanum(s[l]) and l < r:
                l += 1
            while not self.isalphanum(s[r]) and l < r:
                r -= 1
            if s[l].lower() != s[r].lower():
                return False
            l +=1
            r -= 1
        return True
    
    def isalphanum(self, c):
        return (ord('A') <= ord(c) <= ord('Z') or
                ord('a') <= ord(c) <= ord('z') or
                ord('0') <= ord(c) <= ord('9'))
 647. Palindromic Substrings
          def countSubstrings(self, s: str) -> int:
        res = 0
        for i in range(len(s)):
            l= r= i
            while l >= 0 and r<len(s) and s[l]==s[r]:
                l -= 1
                r+=1
                res += 1
            l=i
            r=i+1
            while l >= 0 and r<len(s) and s[l]==s[r]:
                l -= 1
                r+=1
                res += 1
        return res
